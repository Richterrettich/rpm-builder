use clap::{App, Arg};

pub fn build_cli() -> App<'static, 'static> {
    let supported_compression_options = ["gzip", "none"];
    App::new("rpm-builder")
          .version("0.6.0")
          .author("Ren√© R. <richterrettich@gmail.com>")
          .about("Build rpms with ease")
          .arg(Arg::with_name("out")
               .long("out")
               .short("o")
               .value_name("OUT")
               .help("Specify an out file")
               .takes_value(true))
          .arg(Arg::with_name("version")
               .long("version")
               .value_name("VERSION")
               .help("Specify a version")
               .default_value("1.0.0")
               .takes_value(true))
          .arg(Arg::with_name("epoch")
               .long("epoch")
               .value_name("EPOCH")
               .help("Specify an epoch")
               .default_value("0")
               .takes_value(true))
          .arg(Arg::with_name("license")
               .long("license")
               .value_name("LICENSE")
               .help("Specify a license")
               .default_value("MIT")
               .takes_value(true))
          .arg(Arg::with_name("arch")
               .long("arch")
               .value_name("ARCH")
               .help("Specify the target architecture")
               .default_value("x86_64")
               .takes_value(true))
          .arg(Arg::with_name("release")
               .long("release")
               .value_name("RELEASE")
               .help("Specify release number of the package")
               .default_value("1")
               .takes_value(true))
          .arg(Arg::with_name("desc")
               .long("desc")
               .value_name("DESC")
               .help("Give a description of the package")
               .default_value("")
               .takes_value(true))
          .arg(Arg::with_name("file")
               .long("file")
               .value_name("FILE")
               .help("add a regular file to the rpm")
               .takes_value(true)
               .multiple(true)
               .number_of_values(1))
          .arg(Arg::with_name("exec-file")
               .long("exec-file")
               .value_name("EXEC_FILE")
               .help("add a executable-file to the rpm")
               .takes_value(true)
               .multiple(true)
               .number_of_values(1))
          .arg(Arg::with_name("doc-file")
               .long("doc-file")
               .value_name("DOC_FILE")
               .help("add a documentation-file to the rpm")
               .takes_value(true)
               .multiple(true)
               .number_of_values(1))
          .arg(Arg::with_name("config-file")
               .long("config-file")
               .value_name("CONFIG_FILE")
               .help("add a config-file to the rpm")
               .takes_value(true)
               .multiple(true)
               .number_of_values(1))
          .arg(Arg::with_name("dir")
               .long("dir")
               .value_name("DIR")
               .help("add a directory and all its files to the rpm")
               .takes_value(true)
               .multiple(true)
               .number_of_values(1))
          .arg(Arg::with_name("compression")
               .long("compression")
               .value_name("COMPRESSION")
               .help("specify the compression algorithm. Currently only gzip is supported")
               .takes_value(true)
               .default_value("none")
               .multiple(true)
               .possible_values(&supported_compression_options)
               .number_of_values(1))
           .arg(Arg::with_name("changelog")
               .long("changelog")
               .value_name("CHANGELOG_ENTRY")
               .help("add a changelog entry to the rpm. The entry has the form <author>:<content>:<yyyy-mm-dd> (time is in utc)")
               .takes_value(true)
               .multiple(true)
               .number_of_values(1))
          .arg(Arg::with_name("requires")
               .long("requires")
               .value_name("REQUIRES")
               .help("indicates that the rpm requires another package. Use the format '<name> [>|>=|=|<=|< version]'")
               .takes_value(true)
               .multiple(true)
               .number_of_values(1))
          .arg(Arg::with_name("provides")
               .long("provides")
               .value_name("PROVIDES")
               .help("indicates that the rpm provides another package. Use the format '<name> [>|>=|=|<=|< version]'")
               .takes_value(true)
               .multiple(true)
               .number_of_values(1))
          .arg(Arg::with_name("obsoletes")
               .long("obsoletes")
               .value_name("OBSOLETES")
               .help("indicates that the rpm obsoletes another package. Use the format '<name> [>|>=|=|<=|< version]'")
               .takes_value(true)
               .multiple(true)
               .number_of_values(1))
          .arg(Arg::with_name("conflicts")
               .long("conflicts")
               .value_name("CONFLICTS")
               .help("indicates that the rpm conflicts with another package. Use the format '<name> [>|>=|=|<=|< version]'")
               .takes_value(true)
               .multiple(true)
               .number_of_values(1))
          .arg(Arg::with_name("pre-install-script")
               .long("pre-install-script")
               .value_name("PREINSTALLSCRIPT")
               .help("path to a file that contains the pre installation script")
               .takes_value(true)
               .multiple(false)
               .number_of_values(1))
           .arg(Arg::with_name("post-install-script")
               .long("post-install-script")
               .value_name("POSTINSTALLSCRIPT")
               .help("path to a file that contains the post installation script")
               .takes_value(true)
               .multiple(false)
               .number_of_values(1))
          .arg(Arg::with_name("name")
               .help("Specify the name of your package")
               .required(true))
          .arg(Arg::with_name("sign-with-pgp-asc")
               .long("sign-with-pgp-asc")
               .value_name("SIGN_WITH_PGP_ASC")
               .takes_value(true)
               .number_of_values(1)
               .help("sign this package with the specified pgp secret key"))
}
